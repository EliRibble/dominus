#!/usr/bin/env python3
import logging
import dominus.main
import dominus.platform
import os
import re
import requests

SETS = (
    'adventures',
    'base',
    'dark ages',
    'empires',
    'hinterlands',
    'prosperity',
    'guilds',
    'cornucopia',
    'alchemy',
    'seaside',
)

Card = dominus.platform.Card
CARDS = {
    'dark ages': (
        Card('poor house', 'action', 'dark ages'),
        Card('forager', 'action', 'dark ages'),
        Card('market square', 'action/reaction', 'dark ages'),
        Card('hunting grounds', 'action', 'dark ages'),
    ),
    'empires': (
        Card('advance', 'event', 'empires'),
        Card('catacombs', 'action', 'empires'),
        Card('city quarter', 'action', 'empires'),
        Card('emporium', 'action', 'empires'),
        Card('enchantress', 'action/attack/duration', 'empires'),
        Card('patrician', 'action', 'empires'),
        Card('legionary', 'action/attack', 'empires'),
        Card('villa', 'action', 'empires'),
    ),
}

LOGGER = logging.getLogger('populate-dominus')
def main():
    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)

    dominus.main.setup_db()

    create_sets()
    create_cards()
    download_art()

def create_sets():
    all_sets = dominus.platform.get_sets()
    set_names = {_set['name'] for _set in all_sets}
    to_create = set(SETS).difference(set_names)
    LOGGER.debug("%s sets to create", len(to_create))
    for _set in to_create:
        dominus.platform.create_set(_set)

def create_cards():
    all_cards = dominus.platform.get_cards()
    all_sets = dominus.platform.get_sets()
    sets_by_name = {_set['name']: _set for _set in all_sets}
    card_names = {card.name for card in all_cards}
    for _set, cards in CARDS.items():
        _set = sets_by_name[_set]
        for card in cards:
            if card.name in card_names:
                LOGGER.debug("Skipping %s, its already present", card.name)
                continue
            dominus.platform.create_card(_set, card)

def download_art():
    all_cards = dominus.platform.get_cards()
    for card in all_cards:
        ensure_has_art(card)

def ensure_has_art(card):
    path = os.path.join('dominus', 'static', 'cards', card.name + '.jpg')
    if os.path.exists(path):
        LOGGER.debug("Already have art for %s", card.name)
        return
    response = requests.get('http://wiki.dominionstrategy.com/index.php/File:{}.jpg'.format(card.name.title()))
    assert response.status_code == 200
    text = response.text
    match = re.search(r'id="file"><a href="(?P<imgpath>[/\w\d\.]+)"><img alt="File:', text)
    if not match:
        import pdb;pdb.set_trace()
    imgpath = match.groupdict()['imgpath']
    response = requests.get('http://wiki.dominionstrategy.com' + imgpath)
    assert response.status_code == 200
    with open(path, 'wb') as f:
        f.write(response.content)
    LOGGER.debug("Wrote %s", path)

if __name__ == '__main__':
    main()
